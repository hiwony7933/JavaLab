뮤텍스란 MUTual EXclusion. 말 그대로 "상호 배제"로 해석 된다.
가장 쉽게 생각하자면 중복 실행 금지 프로그램이라고 생각하면 될지도.
윈도우에 프로그램을 하나만 띄워야 하는 프로그램을 만들거나, 
실행 되고 있는 프로그램을 다시 실행 했을 경우 "실행 중인 해당 프로그램을 보여주거나" "이미 실행 되었다는 메시지"를 뿌려 주는 식이라고 가정한다면 뮤텍스를 사용 하는것이 좋다.
윈도우 서비스용 프로그램이 대표적인 예라고 할 수 있다.(2번 이상 동시에 실행이 되진 않으니까..)
 
그러면 세마포어(semaphore: 수신호)는? 
한 컴퓨터에 사용자가 노트장이라는 프로그램을 최대한 5개만 실행 되도록 개발 하고 싶다면 바로 세마포어를 써야 한다.
여기서 "최대한 5개만" 이라는 5의 수치는 임계세션(Critical Section)의 계수이고 이런 임계세션을
관리 하는 것을 계수 세마포어라고 하며 세마포어 중 하나인 것이다.

사용자가 notepad.exe를 실행 명령에 20번을 입력하고 동시에 실행 시키려 한다면,
5번만 실행 되고 15번은 무시 되게 하거나, 5번을 실행 하고 하나씩 종료 될 때를 기다렸다가 순차적으로 15개의 노트장을 실행 시켜 줄 수도 있다.
다시 정리 하자면 뮤텍스는 상호배제 알고리즘으로 synchronization로 만든 블록 사이의 로직이 실행이 다 끝날 때까지 락을 걸어 사용한다고 했을 때,
세마포어는 상호배제 알고리즘을 사용하나 거기에 임계영역에 대한 범위를 만들어서 자원을 보호한다고 생각하면 된다.

참고로 이진 세마포어에서 임계섹션이 0과 1을 갖는 쓰레드나 프로세스는 뮤텍스라고 생각해도 무방하다.

다음 소스 예제는 멀티 쓰레드(Multi-Thread) 프로그래밍을 할 때, 한정된 리소스(Resource)를 각 쓰레드들에게 분배해야 하는 경우를 소스에서 설명하려 한다.
응용을 구지 하자면, 데이터베이스 커넥션 풀이 10개의 동시접속을 허용한다고 할때, 50명의 사람이 동시에 접근해서 커넥션 쓰레드를 실행 시켰을 때를 가정하면
10개 까지는 무조건 열어 주고 나머지 사람은 먼저 접속한 사람이 종료할 때까지 기다렸다가 한명씩 연결을 해주는...항상 총 연결 수는 10을 유지하도록 할때, 
(사실 그런 식으로 했다가는 다른 문제로 더욱 큰 문제가 생길 수도 있겠지만. 하나의 가정에 대한 예를 든다면 말이다.)
이런 식으로 10개를 허용한다고 했을 때 50개를 요구하면 10개는 무조건 열어 주고 10개중 한개가 나가면 다음 대기 중인 11번째 애가 와서 사용하고.

import java.util.Random;
import java.util.concurrent.Semaphore;
public class SemaphoreTest {
      private static final Random rd = new Random(10000);
      static class Log {
             public static void debug(String strMessage) {
             System.out.println(Thread.currentThread().getName()  + " : " + strMessage);
            }
        }
      class SemaphoreResource extends Semaphore {
            private static final long serialVersionUID = 1L;
            public SemaphoreResource(final int permits) {
                   super(permits);
            }
           public void use() throws InterruptedException {
                  acquire(); // 세마포어 리소스 확보
                 try {
                        doUse();
                 } finally {
                       release(); // 세마포어 리소스 해제
                       Log.debug("Thread 종료 후 남은  permits: " +   this.availablePermits());
                }
             }
           protected void doUse() throws InterruptedException {
                // 임의의 프로그램을 실행하는데 거리는 가상의 시간
               int sleepTime = rd.nextInt(500);
               Thread.sleep(sleepTime); // 런타임 시간 설정
               Log.debug(" Thread 실행..................." + sleepTime);
                              /** something logic **/
              }
        }
     class MyThread extends Thread {
            private final SemaphoreResource resource;
            public MyThread(String threadName, SemaphoreResource resource) {
                   this.resource = resource;
                   this.setName(threadName);
            }
            @Override
             public void run() {
                  try {
                      resource.use();
                  } catch (InterruptedException e) {
                  } finally { }
             }
        }
     public static void main(String... s) {
          System.out.println("Test Start...");
          SemaphoreResource resource =  new SemaphoreTest().new SemaphoreResource(4);
         for (int i = 0; i < 20; i++) {
                new SemaphoreTest().new MyThread("Thread-" + i, resource) .start();
          }
      }
}
 위 코드는
총 20개의 쓰레드를 동시다발적으로 호출 할때, 세마포어에는 4개의 허용값을 활당할 하는 식으로 동작 한다.



출처 : http://js7309.egloos.com/11085573

